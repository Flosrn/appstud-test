{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/flo/Documents/Code/react-native/appstud/rn-appstud-test/screens/PlaylistsScreen.tsx\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from \"axios\";\nvar API_ENDPOINT = \"http://localhost:3001\";\nexport default function PlaylistsScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      playlists = _React$useState2[0],\n      setPlaylists = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedId = _React$useState4[0],\n      setSelectedId = _React$useState4[1];\n\n  React.useEffect(function () {\n    var fetchData = function fetchData() {\n      var response;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(API_ENDPOINT + \"/v1/browse/featured-playlists\"));\n\n            case 2:\n              response = _context.sent;\n              setPlaylists(response.data.playlists.items);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  });\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        setSelectedId(item.id);\n        navigation.navigate(\"PlaylistDetail\", {\n          id: item.id\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: styles.cover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: item.images[0].url\n      },\n      style: {\n        width: 145,\n        height: 145\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Editor's picks\"), React.createElement(SafeAreaView, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.flatContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: playlists,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    extraData: selectedId,\n    horizontal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#191414\"\n  },\n  flatContainer: {\n    display: \"flex\",\n    flexDirection: \"row\"\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\"\n  },\n  cover: {\n    paddingLeft: 20,\n    paddingTop: 10\n  }\n});","map":{"version":3,"sources":["/Users/flo/Documents/Code/react-native/appstud/rn-appstud-test/screens/PlaylistsScreen.tsx"],"names":["React","axios","API_ENDPOINT","PlaylistsScreen","navigation","useState","playlists","setPlaylists","selectedId","setSelectedId","useEffect","fetchData","get","response","data","items","renderItem","item","id","navigate","styles","cover","uri","images","url","width","height","container","title","flatContainer","StyleSheet","create","flex","backgroundColor","display","flexDirection","fontSize","fontWeight","separator","marginVertical","paddingLeft","paddingTop"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  Text,\n  SafeAreaView,\n  FlatList,\n  StyleSheet,\n  Image,\n  ScrollView,\n  TouchableOpacity,\n} from \"react-native\";\nimport axios from \"axios\";\nimport { StackScreenProps } from \"@react-navigation/stack\";\n\nconst API_ENDPOINT = \"http://localhost:3001\";\n\ntype RootStackParamList = {\n  Playlists: undefined;\n  PlaylistDetail: { id: string };\n};\n\ntype Props = StackScreenProps<RootStackParamList, \"Playlists\">;\n\nexport default function PlaylistsScreen({ navigation }: Props) {\n  const [playlists, setPlaylists] = React.useState();\n  const [selectedId, setSelectedId] = React.useState(null);\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(\n        `${API_ENDPOINT}/v1/browse/featured-playlists`\n      );\n      setPlaylists(response.data.playlists.items);\n    };\n    fetchData();\n  });\n\n  // console.log(\"playlists : \", playlists);\n\n  const renderItem = ({ item }: any) => {\n    return (\n      <TouchableOpacity\n        onPress={() => {\n          setSelectedId(item.id);\n          navigation.navigate(\"PlaylistDetail\", { id: item.id });\n        }}\n      >\n        <View style={styles.cover}>\n          <Image\n            source={{ uri: item.images[0].url }}\n            style={{ width: 145, height: 145 }}\n          />\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Editor's picks</Text>\n      <SafeAreaView style={styles.container}>\n        <ScrollView style={styles.flatContainer}>\n          <FlatList\n            data={playlists}\n            renderItem={renderItem}\n            keyExtractor={(item) => item.id}\n            extraData={selectedId}\n            horizontal\n          />\n        </ScrollView>\n      </SafeAreaView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#191414\",\n  },\n  flatContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  cover: {\n    paddingLeft: 20,\n    paddingTop: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}