{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/flo/Documents/Code/react-native/appstud/rn-appstud-test/screens/PlaylistDetailScreen.tsx\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport axios from \"axios\";\nimport Sound from \"react-native-sound\";\nvar API_ENDPOINT = \"http://localhost:3001\";\nexport default function PlaylistDetailScreen(_ref) {\n  var route = _ref.route;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      playlistDetail = _React$useState2[0],\n      setPlaylistDetail = _React$useState2[1];\n\n  var id = route.params.id;\n  React.useEffect(function () {\n    var fetchData = function fetchData() {\n      var response;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(API_ENDPOINT + \"/v1/playlists/\" + id));\n\n            case 2:\n              response = _context.sent;\n              console.log(\"response.data[0] : \", response.data);\n              setPlaylistDetail(response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  });\n\n  var handleSound = function handleSound(sound) {\n    var whoosh = new Sound(\"whoosh.mp3\", Sound.MAIN_BUNDLE, function (error) {\n      if (error) {\n        console.log(\"failed to load the sound\", error);\n        return;\n      }\n\n      console.log(\"duration in seconds: \" + whoosh.getDuration() + \"number of channels: \" + whoosh.getNumberOfChannels());\n      whoosh.play(function (success) {\n        if (success) {\n          console.log(\"successfully finished playing\");\n        } else {\n          console.log(\"playback failed due to audio decoding errors\");\n        }\n      });\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, playlistDetail && React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: playlistDetail.images[0].url\n    },\n    style: {\n      width: 85,\n      height: 85\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, playlistDetail.name), React.createElement(Text, {\n    style: styles.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, playlistDetail.description)), React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, playlistDetail.tracks.items.map(function (item) {\n    return React.createElement(Text, {\n      key: item.track.id,\n      style: {\n        color: item.track.preview_url ? \"#000\" : \"grey\"\n      },\n      onClick: function onClick() {\n        return handleSound(item.track.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, item.track.name);\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  description: {\n    fontSize: 12\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\"\n  }\n});","map":{"version":3,"sources":["/Users/flo/Documents/Code/react-native/appstud/rn-appstud-test/screens/PlaylistDetailScreen.tsx"],"names":["React","axios","Sound","API_ENDPOINT","PlaylistDetailScreen","route","useState","playlistDetail","setPlaylistDetail","id","params","useEffect","fetchData","get","response","console","log","data","handleSound","sound","whoosh","MAIN_BUNDLE","error","getDuration","getNumberOfChannels","play","success","styles","container","uri","images","url","width","height","title","name","description","tracks","items","map","item","track","color","preview_url","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","separator","marginVertical"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { View, ScrollView, Text, StyleSheet, Image } from \"react-native\";\nimport axios from \"axios\";\nimport { StackScreenProps } from \"@react-navigation/stack\";\nimport { PlaylistDetail, Item } from \"../models/PlaylistDetail\";\nimport Sound from \"react-native-sound\";\n\nconst API_ENDPOINT = \"http://localhost:3001\";\n\ntype RootStackParamList = {\n  PlaylistDetail: { id: string };\n};\n\ntype Props = StackScreenProps<RootStackParamList, \"PlaylistDetail\">;\n\nexport default function PlaylistDetailScreen({ route }: Props) {\n  const [playlistDetail, setPlaylistDetail] = React.useState<PlaylistDetail>();\n  const { id } = route.params;\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(`${API_ENDPOINT}/v1/playlists/${id}`);\n      console.log(\"response.data[0] : \", response.data);\n      setPlaylistDetail(response.data);\n    };\n    fetchData();\n  });\n\n  const handleSound = (sound) => {\n    var whoosh = new Sound(\"whoosh.mp3\", Sound.MAIN_BUNDLE, (error) => {\n      if (error) {\n        console.log(\"failed to load the sound\", error);\n        return;\n      }\n      // loaded successfully\n      console.log(\n        \"duration in seconds: \" +\n          whoosh.getDuration() +\n          \"number of channels: \" +\n          whoosh.getNumberOfChannels()\n      );\n\n      // Play the sound with an onEnd callback\n      whoosh.play((success) => {\n        if (success) {\n          console.log(\"successfully finished playing\");\n        } else {\n          console.log(\"playback failed due to audio decoding errors\");\n        }\n      });\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      {playlistDetail && (\n        <View>\n          <View>\n            <Image\n              source={{ uri: playlistDetail.images[0].url }}\n              style={{ width: 85, height: 85 }}\n            />\n            <Text style={styles.title}>{playlistDetail.name}</Text>\n            <Text style={styles.description}>{playlistDetail.description}</Text>\n          </View>\n          <ScrollView>\n            {playlistDetail.tracks.items.map((item: Item) => (\n              <Text\n                key={item.track.id}\n                style={{ color: item.track.preview_url ? \"#000\" : \"grey\" }}\n                onClick={() => handleSound(item.track.id)}\n              >\n                {item.track.name}\n              </Text>\n            ))}\n          </ScrollView>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  description: {\n    fontSize: 12,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}