{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/flo/Documents/Code/react-native/appstud/rn-appstud-test/screens/PlaylistDetailScreen.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from \"axios\";\nimport { Audio } from \"expo-av\";\nvar API_ENDPOINT = \"http://localhost:3001\";\nexport default function PlaylistDetailScreen(_ref) {\n  var route = _ref.route;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      playlistDetail = _React$useState2[0],\n      setPlaylistDetail = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      audioUri = _React$useState4[0],\n      setAudioUri = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    isPlaying: false,\n    playbackInstance: null,\n    currentIndex: 0,\n    volume: 1.0,\n    isBuffering: false\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      audioState = _React$useState6[0],\n      setAudioState = _React$useState6[1];\n\n  var id = route.params.id;\n  React.useEffect(function () {\n    var fetchData = function fetchData() {\n      var response;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(API_ENDPOINT + \"/v1/playlists/\" + id));\n\n            case 2:\n              response = _context.sent;\n              setPlaylistDetail(response.data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  });\n\n  var loadAudio = function loadAudio() {\n    var playbackInstance, source, status;\n    return _regeneratorRuntime.async(function loadAudio$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            playbackInstance = new Audio.Sound();\n            source = {\n              uri: audioUri\n            };\n            status = {\n              shouldPlay: audioState.isPlaying,\n              volume: audioState.volume\n            };\n            playbackInstance.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(playbackInstance.loadAsync(source, status, false));\n\n          case 7:\n            setAudioState(_objectSpread(_objectSpread({}, audioState), {}, {\n              playbackInstance: playbackInstance\n            }));\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  React.useEffect(function () {\n    var test = function test() {\n      return _regeneratorRuntime.async(function test$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(Audio.setAudioModeAsync({\n                allowsRecordingIOS: false,\n                interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n                playsInSilentModeIOS: true,\n                interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n                shouldDuckAndroid: true,\n                staysActiveInBackground: true,\n                playThroughEarpieceAndroid: true\n              }));\n\n            case 3:\n              loadAudio();\n              _context3.next = 9;\n              break;\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    test();\n  }, []);\n\n  var onPlaybackStatusUpdate = function onPlaybackStatusUpdate(status) {\n    console.log(\"status : \", status);\n    setAudioState(_objectSpread(_objectSpread({}, audioState), {}, {\n      isBuffering: status.isBuffering\n    }));\n  };\n\n  var handlePlayPause = function handlePlayPause() {\n    return _regeneratorRuntime.async(function handlePlayPause$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            setAudioState(_objectSpread(_objectSpread({}, audioState), {}, {\n              isPlaying: !audioState.isPlaying\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, playlistDetail && React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: playlistDetail.images[0].url\n    },\n    style: {\n      width: 85,\n      height: 85\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, playlistDetail.name), React.createElement(Text, {\n    style: styles.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, playlistDetail.description)), React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, playlistDetail.tracks.items.map(function (item) {\n    return React.createElement(TouchableOpacity, {\n      key: item.track.id,\n      onPress: function onPress() {\n        return setAudioUri(item.track.preview_url);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: item.track.preview_url ? \"#000\" : \"grey\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, item.track.name));\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  description: {\n    fontSize: 12\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\"\n  }\n});","map":{"version":3,"sources":["/Users/flo/Documents/Code/react-native/appstud/rn-appstud-test/screens/PlaylistDetailScreen.tsx"],"names":["React","axios","Audio","API_ENDPOINT","PlaylistDetailScreen","route","useState","playlistDetail","setPlaylistDetail","audioUri","setAudioUri","isPlaying","playbackInstance","currentIndex","volume","isBuffering","audioState","setAudioState","id","params","useEffect","fetchData","get","response","data","loadAudio","Sound","source","uri","status","shouldPlay","setOnPlaybackStatusUpdate","onPlaybackStatusUpdate","loadAsync","console","log","test","setAudioModeAsync","allowsRecordingIOS","interruptionModeIOS","INTERRUPTION_MODE_IOS_DO_NOT_MIX","playsInSilentModeIOS","interruptionModeAndroid","INTERRUPTION_MODE_ANDROID_DUCK_OTHERS","shouldDuckAndroid","staysActiveInBackground","playThroughEarpieceAndroid","handlePlayPause","styles","container","images","url","width","height","title","name","description","tracks","items","map","item","track","preview_url","color","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","separator","marginVertical"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  ScrollView,\n  Text,\n  StyleSheet,\n  Image,\n  TouchableOpacity,\n} from \"react-native\";\nimport axios from \"axios\";\nimport { StackScreenProps } from \"@react-navigation/stack\";\nimport { PlaylistDetail, Item } from \"../models/PlaylistDetail\";\nimport { Audio } from \"expo-av\";\n\nconst API_ENDPOINT = \"http://localhost:3001\";\n\ntype RootStackParamList = {\n  PlaylistDetail: { id: string };\n};\n\ntype Props = StackScreenProps<RootStackParamList, \"PlaylistDetail\">;\n\nexport default function PlaylistDetailScreen({ route }: Props) {\n  const [playlistDetail, setPlaylistDetail] = React.useState<PlaylistDetail>();\n  const [audioUri, setAudioUri] = React.useState(\"\");\n  const [audioState, setAudioState] = React.useState({\n    isPlaying: false,\n    playbackInstance: null,\n    currentIndex: 0,\n    volume: 1.0,\n    isBuffering: false,\n  });\n  const { id } = route.params;\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(`${API_ENDPOINT}/v1/playlists/${id}`);\n      setPlaylistDetail(response.data);\n    };\n    fetchData();\n  });\n\n  const loadAudio = async () => {\n    try {\n      const playbackInstance = new Audio.Sound();\n      const source = {\n        uri: audioUri,\n      };\n\n      const status = {\n        shouldPlay: audioState.isPlaying,\n        volume: audioState.volume,\n      };\n\n      playbackInstance.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n      await playbackInstance.loadAsync(source, status, false);\n      setAudioState({ ...audioState, playbackInstance });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  React.useEffect(() => {\n    const test = async () => {\n      try {\n        await Audio.setAudioModeAsync({\n          allowsRecordingIOS: false,\n          interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n          playsInSilentModeIOS: true,\n          interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n          shouldDuckAndroid: true,\n          staysActiveInBackground: true,\n          playThroughEarpieceAndroid: true,\n        });\n        loadAudio();\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    test();\n  }, []);\n\n  const onPlaybackStatusUpdate = (status) => {\n    console.log(\"status : \", status);\n    setAudioState({\n      ...audioState,\n      isBuffering: status.isBuffering,\n    });\n  };\n\n  // const loadAudio = async (soundUri: string) => {\n  //   if (!soundUri) return;\n  //   console.log(\"soundUri : \", soundUri);\n  //\n  //   const playbackInstance = new Audio.Sound();\n  //   console.log(\"playbackInstance : \", playbackInstance);\n  //   const status = await playbackInstance.getStatusAsync();\n  //   console.log(\"status : \", status);\n  //\n  //   try {\n  //     const source = {\n  //       uri: soundUri,\n  //     };\n  //\n  //     const status = {\n  //       shouldPlay: true,\n  //       volume: audioState.volume,\n  //     };\n  //\n  //     playbackInstance.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n  //     await playbackInstance.loadAsync(source, status, false);\n  //     setAudioState({ ...audioState, playbackInstance, isPlaying: true });\n  //   } catch (e) {\n  //     console.log(e);\n  //   }\n  // };\n\n  const handlePlayPause = async () => {\n    setAudioState({\n      ...audioState,\n      isPlaying: !audioState.isPlaying,\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      {playlistDetail && (\n        <View>\n          <View>\n            <Image\n              source={{ uri: playlistDetail.images[0].url }}\n              style={{ width: 85, height: 85 }}\n            />\n            <Text style={styles.title}>{playlistDetail.name}</Text>\n            <Text style={styles.description}>{playlistDetail.description}</Text>\n          </View>\n          <ScrollView>\n            {playlistDetail.tracks.items.map((item: Item) => (\n              <TouchableOpacity\n                key={item.track.id}\n                onPress={() => setAudioUri(item.track.preview_url)}\n\n                // onPress={() => loadAudio(item.track.preview_url)}\n              >\n                <Text\n                  style={{ color: item.track.preview_url ? \"#000\" : \"grey\" }}\n                >\n                  {item.track.name}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </ScrollView>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  description: {\n    fontSize: 12,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}